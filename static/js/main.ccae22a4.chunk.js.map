{"version":3,"sources":["components/TodoApp.jsx","components/TodoItem.jsx","components/TodoList.jsx","components/TodosFilter.jsx","api/getData.js","App.jsx","index.js"],"names":["TodoApp","React","memo","onCreateTodo","useState","inputValue","setInputValue","action","onSubmit","e","preventDefault","type","className","data-cy","placeholder","value","onChange","target","TodoItem","todo","changeTodo","removeTodo","completed","setComplited","editTodo","setEditTodo","title","editValue","setEditValue","useEffect","id","onKeyUp","key","onBlur","onDoubleClick","checked","onClick","TodoList","items","changeAllCompleted","checkedAllCompleted","htmlFor","map","toDo","Fragment","TodosFilter","removeCompleted","hiddenBtnDeleteCompleted","countUncompleted","filterActive","filterCompleted","filterAll","selectidFilter","setSelectidFilter","href","request","url","options","fetch","then","response","ok","Error","status","statusText","json","App","allTodos","setAllTodos","active","setActive","setCompleted","setCheckedAllCompleted","hiddenBtnDelCompleted","setHiddenBtnDelCompleted","setCountUncompleted","userId","every","some","reduce","sumFalse","count","useCallback","filter","useMemo","onChangeTodos","todos","length","forEach","el","changePart","todoId","data","method","headers","body","JSON","stringify","createTodo","deleteTodo","ReactDOM","render","document","getElementById"],"mappings":"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","file":"static/js/main.ccae22a4.chunk.js","sourcesContent":["import React, { useState } from 'react';\n\nexport const TodoApp = React.memo(({ onCreateTodo }) => {\n  const [inputValue, setInputValue] = useState('');\n\n  return (\n    <form\n      action=\"#\"\n      onSubmit={(e) => {\n        e.preventDefault();\n        if (inputValue) {\n          onCreateTodo(inputValue);\n        }\n\n        setInputValue('');\n      }}\n    >\n      <input\n        type=\"text\"\n        className=\"new-todo\"\n        data-cy=\"createTodo\"\n        placeholder=\"What needs to be done?\"\n        value={inputValue}\n        onChange={(e) => {\n          setInputValue(e.target.value);\n        }}\n      />\n    </form>\n  );\n});\n","import React, { useState, useEffect } from 'react';\n\nexport const TodoItem = React.memo(({\n  todo, changeTodo, removeTodo,\n}) => {\n  const [completed, setComplited] = useState(todo.completed);\n  const [editTodo, setEditTodo] = useState(false);\n  const [editValue, setEditValue] = useState(todo.title);\n\n  useEffect(() => setComplited(todo.completed), [todo.completed]);\n\n  return (\n    <li\n      className={`${completed && 'completed'} ${editTodo && 'editing'}`}\n    >\n      { !editTodo\n        ? (\n          <div\n            onDoubleClick={() => setEditTodo(true)}\n          >\n            <input\n              type=\"checkbox\"\n              checked={todo.completed}\n              className=\"toggle\"\n              id={todo.id}\n              onClick={(e) => {\n                setComplited(e.target.checked);\n                changeTodo(todo.id, { completed: e.target.checked });\n              }}\n            />\n            <label>\n              {todo.title}\n            </label>\n            <button\n              type=\"button\"\n              className=\"destroy\"\n              data-cy=\"deleteTodo\"\n              onClick={() => removeTodo(todo.id)}\n            />\n          </div>\n        )\n        : (\n          <input\n            type=\"text\"\n            className=\"edit\"\n            id=\"editTodo\"\n            value={editValue}\n            onChange={(e) => {\n              setEditValue(e.target.value);\n            }}\n            onKeyUp={(e) => {\n              if (e.key === 'Enter') {\n                if (!e.target.value) {\n                  removeTodo(todo.id);\n                } else {\n                  changeTodo(todo.id, { title: editValue });\n                  setEditTodo(false);\n                }\n              }\n\n              if (e.key === 'Escape') {\n                e.preventDefault();\n                setEditTodo(false);\n              }\n            }}\n            onBlur={(e) => {\n              if (!e.target.value) {\n                removeTodo(todo.id);\n              } else {\n                changeTodo(todo.id, { title: editValue });\n                setEditTodo(false);\n              }\n            }}\n          />\n        )}\n    </li>\n  );\n});\n","import React from 'react';\nimport { TodoItem } from './TodoItem';\n\nexport const TodoList = React.memo(({\n  items, changeAllCompleted, changeTodo, removeTodo, checkedAllCompleted,\n}) => (\n  <>\n    <input\n      type=\"checkbox\"\n      id=\"toggle-all\"\n      className=\"toggle-all\"\n      data-cy=\"toggleAll\"\n      checked={checkedAllCompleted}\n      onClick={(e) => {\n        changeAllCompleted(e.target.checked);\n      }}\n    />\n    <label htmlFor=\"toggle-all\">Mark all as complete</label>\n    <ul\n      data-cy=\"todoList\"\n      className=\"todo-list\"\n    >\n      {items.map(toDo => (\n        <React.Fragment key={toDo.id}>\n          <TodoItem\n            todo={toDo}\n            removeTodo={removeTodo}\n            changeTodo={changeTodo}\n          />\n        </React.Fragment>\n      ))}\n    </ul>\n  </>\n));\n","import React, { useState } from 'react';\n\nexport const TodosFilter = ({\n  removeCompleted, hiddenBtnDeleteCompleted, countUncompleted,\n  filterActive, filterCompleted, filterAll,\n}) => {\n  const [selectidFilter, setSelectidFilter] = useState('all');\n\n  return (\n    <>\n      <span\n        className=\"todo-count\"\n        data-cy=\"todosCounter\"\n      >\n        {`${countUncompleted} items left`}\n      </span>\n\n      <ul className=\"filters\">\n        <li>\n          <a\n            href=\"#/\"\n            className={`${(selectidFilter === 'all') && 'selected'}`}\n            onClick={(e) => {\n              e.preventDefault();\n              setSelectidFilter('all');\n              filterAll();\n            }}\n          >\n            All\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/active\"\n            className={`${(selectidFilter === 'active') && 'selected'}`}\n            onClick={(e) => {\n              e.preventDefault();\n              setSelectidFilter('active');\n              filterActive();\n            }}\n          >\n            Active\n          </a>\n        </li>\n\n        <li>\n          <a\n            href=\"#/completed\"\n            className={`${(selectidFilter === 'completed') && 'selected'}`}\n            onClick={(e) => {\n              e.preventDefault();\n              setSelectidFilter('completed');\n              filterCompleted();\n            }}\n          >\n            Completed\n          </a>\n        </li>\n      </ul>\n\n      {hiddenBtnDeleteCompleted && (\n      <button\n        type=\"button\"\n        className=\"clear-completed\"\n        onClick={() => removeCompleted()}\n      >\n        Clear completed\n      </button>\n      )}\n\n    </>\n  );\n};\n","export const request = (url, options) => fetch(`https://mate.academy/students-api${url}`, options)\n  .then((response) => {\n    if (!response.ok) {\n      throw new Error(`${response.status}-${response.statusText}`);\n    }\n\n    return response.json();\n  });\n\nexport const getUser = id => request(`/users/${id}`);\n\nexport const getUserTodos = id => request(`/todos?userId=${id}`);\n\nexport const createUser = (name, username) => request(`/users`, {\n  method: 'Post',\n  headers: { 'Content-type': 'application/json; charset=UTF-8' },\n  body: JSON.stringify({\n    name,\n    username,\n    email: 'ilona@example.com',\n    phone: '1234567890',\n  }),\n});\n\nexport const createTodo = (title, userId) => request(`/todos`, {\n  method: 'POST',\n  headers: { 'Content-type': 'application/json; charset=UTF-8' },\n  body: JSON.stringify({\n    title,\n    userId,\n    completed: false,\n  }),\n});\n\nexport const deleteTodo = id => request(`/todos/${id}`, {\n  method: 'DELETE',\n});\n\nexport const changeTodoOnServer = (todoId, data) => request(`/todos/${todoId}`, {\n  method: 'PATCH',\n  headers: { 'Content-type': 'application/json; charset=UTF-8' },\n  body: JSON.stringify(data),\n});\n\nexport const deletUser = id => request(`/users/${id}`, {\n  method: 'DELETE',\n});\n","import React, { useCallback, useEffect, useMemo, useState } from 'react';\nimport { TodoApp } from './components/TodoApp';\nimport { TodoList } from './components/TodoList';\nimport { TodosFilter } from './components/TodosFilter';\nimport {\n  getUser, getUserTodos, changeTodoOnServer, createTodo, deleteTodo,\n} from './api/getData';\n\nfunction App() {\n  const [allTodos, setAllTodos] = useState([]);\n  const [userName, setUserName] = useState('');\n  const [active, setActive] = useState(false);\n  const [completed, setCompleted] = useState(false);\n  const [checkedAllCompleted, setCheckedAllCompleted] = useState(false);\n  const [hiddenBtnDelCompleted, setHiddenBtnDelCompleted] = useState(false);\n  const [countUncompleted, setCountUncompleted] = useState(0);\n  const [userId] = useState(3860);\n\n  useEffect(() => {\n    setCheckedAllCompleted(allTodos.every(todo => todo.completed));\n    setHiddenBtnDelCompleted(allTodos.some(todo => todo.completed));\n    setCountUncompleted(allTodos.reduce((sumFalse, todo) => {\n      let count = sumFalse;\n\n      return (!todo.completed) ? (count += 1) : count;\n    }, 0));\n  }, [allTodos]);\n\n  const filterActive = useCallback(() => {\n    setActive(true);\n    setCompleted(false);\n  });\n\n  const filterCompleted = useCallback(() => {\n    setActive(false);\n    setCompleted(true);\n  });\n\n  const filterAll = useCallback(() => {\n    setActive(false);\n    setCompleted(false);\n  });\n\n  const filter = useMemo(() => {\n    switch (true) {\n      case active:\n        return allTodos.filter(todo => !todo.completed);\n      case completed:\n        return allTodos.filter(todo => todo.completed);\n      default:\n        return allTodos;\n    }\n  }, [active, completed, allTodos]);\n\n  const onChangeTodos = useCallback(() => {\n    getUserTodos(userId)\n      .then((todos) => {\n        setAllTodos(todos);\n      });\n  }, []);\n\n  const changeAllCompleted = useCallback((status) => {\n    if (allTodos.length > 0) {\n      allTodos.forEach((el) => {\n        changeTodo(el.id, { completed: status });\n      });\n    }\n  }, [allTodos]);\n\n  const changeTodo = useCallback((id, changePart) => {\n    changeTodoOnServer(id, changePart)\n      .then(() => onChangeTodos());\n  }, []);\n\n  const onCreateTodo = useCallback((data) => {\n    createTodo(data, userId)\n      .then(() => onChangeTodos());\n  }, []);\n\n  const removeTodo = useCallback((id) => {\n    deleteTodo(id)\n      .then(() => onChangeTodos());\n  }, []);\n\n  const removeCompleted = useCallback(() => {\n    if (allTodos.length > 0) {\n      allTodos.forEach((el) => {\n        if (el.completed) {\n          removeTodo(el.id);\n        }\n      });\n    }\n  }, [allTodos]);\n\n  return (\n    <section className=\"todoapp\">\n      <header className=\"header\">\n        <h1>\n          My todos\n        </h1>\n        <TodoApp\n          userId={userId}\n          onCreateTodo={onCreateTodo}\n        />\n      </header>\n      <section className=\"main\">\n        <TodoList\n          items={filter}\n          removeTodo={removeTodo}\n          changeTodo={changeTodo}\n          changeAllCompleted={changeAllCompleted}\n          checkedAllCompleted={checkedAllCompleted}\n        />\n      </section>\n      {allTodos[0] && (\n      <footer className=\"footer\">\n\n        <TodosFilter\n          removeCompleted={removeCompleted}\n          countUncompleted={countUncompleted}\n          filterActive={filterActive}\n          filterCompleted={filterCompleted}\n          filterAll={filterAll}\n          hiddenBtnDeleteCompleted={hiddenBtnDelCompleted}\n        />\n\n      </footer>\n      )}\n    </section>\n  );\n}\n\nexport default App;\n","import React from 'react';\nimport ReactDOM from 'react-dom';\n\nimport './styles/index.css';\nimport './styles/todo-list.css';\nimport './styles/filters.css';\n\nimport App from './App';\n\nReactDOM.render(\n  <App />,\n  document.getElementById('root'),\n);\n"],"sourceRoot":""}